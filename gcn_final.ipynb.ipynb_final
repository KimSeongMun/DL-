{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"gcn.ipynb의 사본","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM6G7m1wfWhdVYc+F6PVtX5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"82cb45a3d1714eb0ac5dcf05ff19d7dd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2960ebc3605348bebe1e58099917227f","IPY_MODEL_1e10edc2ed294b2cb78c4aafe667790d","IPY_MODEL_1a24177bcffa47ad86c43a0653e57925"],"layout":"IPY_MODEL_23ef861f4aab4c1984b164471c56eab0"}},"2960ebc3605348bebe1e58099917227f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_efcc5205fc324d8baf3d4a175f904509","placeholder":"​","style":"IPY_MODEL_8a6833e559064f53979bf51a8f71a6e5","value":"Reading Data: 100%"}},"1e10edc2ed294b2cb78c4aafe667790d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_295ab7aa43314594ad8175c2808d5c36","max":10000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_caf4340083ca41b0a761cd137385f0c1","value":10000}},"1a24177bcffa47ad86c43a0653e57925":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4005be002c3442de94971d0c92476460","placeholder":"​","style":"IPY_MODEL_578f7dc9bec842fdab1849830e2adc7e","value":" 10000/10000 [00:03&lt;00:00, 3092.30it/s]"}},"23ef861f4aab4c1984b164471c56eab0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"efcc5205fc324d8baf3d4a175f904509":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8a6833e559064f53979bf51a8f71a6e5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"295ab7aa43314594ad8175c2808d5c36":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"caf4340083ca41b0a761cd137385f0c1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4005be002c3442de94971d0c92476460":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"578f7dc9bec842fdab1849830e2adc7e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"33d658f3398b4d10b43623f1f3889ea8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5a4378aeeb344d3a945dc6614be51d22","IPY_MODEL_0edff6505c5d4474bcc35035012aa0fc","IPY_MODEL_171901947dc843fdb56708070030c30c"],"layout":"IPY_MODEL_417527719ba64b4c80c38ca30f2f021a"}},"5a4378aeeb344d3a945dc6614be51d22":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f17eaac9f8cd4c87a9a16e25b6c015fc","placeholder":"​","style":"IPY_MODEL_63143ddee06242fdb4cf8caa1e4a0157","value":"Converting to Graph: 100%"}},"0edff6505c5d4474bcc35035012aa0fc":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a63f1d028201419190c4ae43b9dd02f7","max":10000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_664284a3a23541118569fc72edd9c85c","value":10000}},"171901947dc843fdb56708070030c30c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c3346f3fa47843dc99e9705bc02d4cdd","placeholder":"​","style":"IPY_MODEL_48eb0c10017942dfbec86421de118b84","value":" 10000/10000 [00:09&lt;00:00, 1140.72it/s]"}},"417527719ba64b4c80c38ca30f2f021a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f17eaac9f8cd4c87a9a16e25b6c015fc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"63143ddee06242fdb4cf8caa1e4a0157":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a63f1d028201419190c4ae43b9dd02f7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"664284a3a23541118569fc72edd9c85c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c3346f3fa47843dc99e9705bc02d4cdd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"48eb0c10017942dfbec86421de118b84":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["rdkit morecular data를 저장해놓은곳"],"metadata":{"id":"oYgAuFno-4PN"}},{"cell_type":"code","source":["!pip install rdkit-pypi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bnht2ucc_znB","executionInfo":{"status":"ok","timestamp":1647410175931,"user_tz":-540,"elapsed":8147,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}},"outputId":"48f6ba52-d592-4224-af80-9866e542580e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdkit-pypi\n","  Downloading rdkit_pypi-2021.9.5.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (22.3 MB)\n","\u001b[K     |████████████████████████████████| 22.3 MB 1.5 MB/s \n","\u001b[?25hRequirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from rdkit-pypi) (7.1.2)\n","Requirement already satisfied: numpy>=1.19 in /usr/local/lib/python3.7/dist-packages (from rdkit-pypi) (1.21.5)\n","Installing collected packages: rdkit-pypi\n","Successfully installed rdkit-pypi-2021.9.5.1\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oh_XEyLy9pvc"},"outputs":[],"source":["!curl -LO  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n","!bash ./Miniconda3-latest-Linux-x86_64.sh -b -f -p /usr/local\n","\n","import sys\n","sys.path.append('/usr/local/lib/python3.6/site-packages/')\n","\n","!conda install -y -c rdkit rdkit "]},{"cell_type":"markdown","source":["smiles 가 분자를 text로 저장되어있는것\n","2번째줄은 원자들의 list를 담은 것"],"metadata":{"id":"BPRyNlLC_Z7b"}},{"cell_type":"code","source":["!curl -o ZINC.smiles https://raw.githubusercontent.com/heartcored98/Standalone-DeepLearning/master/Lec9/ZINC.smiles\n","!curl -o vocab.npy https://raw.githubusercontent.com/heartcored98/Standalone-DeepLearning/master/Lec9/vocab.np"],"metadata":{"id":"oYGAfIFB-bPd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import sys\n","import time\n","import copy\n","\n","import numpy as np\n","\n","from rdkit import Chem, DataStructs\n","from rdkit.Chem import AllChem\n","from rdkit.Chem.Crippen import MolLogP\n","\n","from sklearn.metrics import mean_absolute_error \n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","from torch.autograd import Variable\n","\n","from tqdm import tnrange, tqdm_notebook\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"Qv60VSlO_mjd","executionInfo":{"status":"ok","timestamp":1647410259259,"user_tz":-540,"elapsed":6771,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["np.random.seed(123)\n","torch.manual_seed(123)\n","\n","torch.set_default_tensor_type('torch.FloatTensor')"],"metadata":{"id":"zltZcYfLGhpG","executionInfo":{"status":"ok","timestamp":1647410262188,"user_tz":-540,"elapsed":419,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def read_ZINC_smiles(file_name, num_mol):\n","    f = open(file_name, 'r')\n","    contents = f.readlines()\n","\n","    smi_list = [] # 분자의 그래프 input\n","    logP_list = [] # 화학적 특성 \n","\n","    for i in tqdm_notebook(range(num_mol), desc='Reading Data'):\n","        smi = contents[i].strip() # 파일에 데이터를 저장할때 공백부분을 제거해서 smi 저장\n","        m = Chem.MolFromSmiles(smi)\n","        smi_list.append(smi)\n","        logP_list.append(MolLogP(m))\n","\n","    logP_list = np.asarray(logP_list).astype(float)\n","\n","    return smi_list, logP_list\n","\n","\n","def smiles_to_onehot(smi_list):\n","    def smiles_to_vector(smiles, vocab, max_length):\n","        while len(smiles) < max_length:\n","            smiles += \" \"\n","        vector = [vocab.index(str(x)) for x in smiles]\n","        one_hot = np.zeros((len(vocab), max_length), dtype=int)\n","        for i, elm in enumerate(vector):\n","            one_hot[elm][i] = 1\n","        return one_hot\n","\n","    vocab = np.load('./vocab.npy')\n","    smi_total = []\n","\n","    for i, smi in tqdm_notebook(enumerate(smi_list), desc='Converting to One Hot'):\n","        smi_onehot = smiles_to_vector(smi, list(vocab), 120)\n","        smi_total.append(smi_onehot)\n","\n","    return np.asarray(smi_total)\n","\n","def convert_to_graph(smiles_list):\n","    adj = []\n","    adj_norm = []\n","    features = []\n","    maxNumAtoms = 50 # 최대 원자가 50개\n","    for i in tqdm_notebook(smiles_list, desc='Converting to Graph'):\n","        # Mol\n","        iMol = Chem.MolFromSmiles(i.strip())\n","        #Adj\n","        iAdjTmp = Chem.rdmolops.GetAdjacencyMatrix(iMol)\n","        # Feature\n","        if( iAdjTmp.shape[0] <= maxNumAtoms):\n","            # Feature-preprocessing\n","            iFeature = np.zeros((maxNumAtoms, 58))\n","            iFeatureTmp = []\n","            for atom in iMol.GetAtoms():\n","                iFeatureTmp.append( atom_feature(atom) ) ### atom features only\n","            iFeature[0:len(iFeatureTmp), 0:58] = iFeatureTmp ### 0 padding for feature-set\n","            features.append(iFeature)\n","\n","            # Adj-preprocessing\n","            iAdj = np.zeros((maxNumAtoms, maxNumAtoms))\n","            iAdj[0:len(iFeatureTmp), 0:len(iFeatureTmp)] = iAdjTmp + np.eye(len(iFeatureTmp))\n","            adj.append(np.asarray(iAdj))\n","    features = np.asarray(features)\n","\n","    return features, adj\n","    \n","def atom_feature(atom):\n","    return np.array(one_of_k_encoding_unk(atom.GetSymbol(),\n","                                      ['C', 'N', 'O', 'S', 'F', 'H', 'Si', 'P', 'Cl', 'Br',\n","                                       'Li', 'Na', 'K', 'Mg', 'Ca', 'Fe', 'As', 'Al', 'I', 'B',\n","                                       'V', 'Tl', 'Sb', 'Sn', 'Ag', 'Pd', 'Co', 'Se', 'Ti', 'Zn',\n","                                       'Ge', 'Cu', 'Au', 'Ni', 'Cd', 'Mn', 'Cr', 'Pt', 'Hg', 'Pb']) +\n","                    one_of_k_encoding(atom.GetDegree(), [0, 1, 2, 3, 4, 5]) +\n","                    one_of_k_encoding_unk(atom.GetTotalNumHs(), [0, 1, 2, 3, 4]) +\n","                    one_of_k_encoding_unk(atom.GetImplicitValence(), [0, 1, 2, 3, 4, 5]) +\n","                    [atom.GetIsAromatic()])    # (40, 6, 5, 6, 1)\n","\n","def one_of_k_encoding(x, allowable_set):\n","    if x not in allowable_set:\n","        raise Exception(\"input {0} not in allowable set{1}:\".format(x, allowable_set))\n","    return list(map(lambda s: x == s, allowable_set))\n","\n","def one_of_k_encoding_unk(x, allowable_set):\n","    \"\"\"Maps inputs not in the allowable set to the last element.\"\"\"\n","    if x not in allowable_set:\n","        x = allowable_set[-1]\n","    return list(map(lambda s: x == s, allowable_set))"],"metadata":{"id":"lbonlPPsGi2A","executionInfo":{"status":"ok","timestamp":1647410265777,"user_tz":-540,"elapsed":681,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["list_smi, list_logP = read_ZINC_smiles('ZINC.smiles', 10000)\n","list_feature, list_adj = convert_to_graph(list_smi)"],"metadata":{"id":"TX2EXw0oIx5Z","colab":{"base_uri":"https://localhost:8080/","height":193,"referenced_widgets":["82cb45a3d1714eb0ac5dcf05ff19d7dd","2960ebc3605348bebe1e58099917227f","1e10edc2ed294b2cb78c4aafe667790d","1a24177bcffa47ad86c43a0653e57925","23ef861f4aab4c1984b164471c56eab0","efcc5205fc324d8baf3d4a175f904509","8a6833e559064f53979bf51a8f71a6e5","295ab7aa43314594ad8175c2808d5c36","caf4340083ca41b0a761cd137385f0c1","4005be002c3442de94971d0c92476460","578f7dc9bec842fdab1849830e2adc7e","33d658f3398b4d10b43623f1f3889ea8","5a4378aeeb344d3a945dc6614be51d22","0edff6505c5d4474bcc35035012aa0fc","171901947dc843fdb56708070030c30c","417527719ba64b4c80c38ca30f2f021a","f17eaac9f8cd4c87a9a16e25b6c015fc","63143ddee06242fdb4cf8caa1e4a0157","a63f1d028201419190c4ae43b9dd02f7","664284a3a23541118569fc72edd9c85c","c3346f3fa47843dc99e9705bc02d4cdd","48eb0c10017942dfbec86421de118b84"]},"executionInfo":{"status":"ok","timestamp":1647410289522,"user_tz":-540,"elapsed":13204,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}},"outputId":"1cf59c58-6b2f-4fcf-af29-899d8b3d8ac4"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  \n"]},{"output_type":"display_data","data":{"text/plain":["Reading Data:   0%|          | 0/10000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"82cb45a3d1714eb0ac5dcf05ff19d7dd"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:43: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n"]},{"output_type":"display_data","data":{"text/plain":["Converting to Graph:   0%|          | 0/10000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"33d658f3398b4d10b43623f1f3889ea8"}},"metadata":{}}]},{"cell_type":"code","source":["class GCNDataset(Dataset):\n","    def __init__(self, list_feature, list_adj, list_logP):\n","        self.list_feature = list_feature\n","        self.list_adj = list_adj\n","        self.list_logP = list_logP\n","\n","    def __len__(self):\n","        return len(self.list_feature)\n","\n","    def __getitem__(self, index):\n","        return self.list_feature[index], self.list_adj[index], self.list_logP[index]\n","\n","\n","def partition(list_feature, list_adj, list_logP):\n","    test_size = 0.2\n","    val_size = 0.2\n","    num_total = list_feature.shape[0]\n","    num_train = int(num_total * (1 - test_size - val_size))\n","    num_val = int(num_total * val_size)\n","    num_test = int(num_total * test_size)\n","\n","    feature_train = list_feature[:num_train]\n","    adj_train = list_adj[:num_train]\n","    logP_train = list_logP[:num_train]\n","    feature_val = list_feature[num_train:num_train + num_val]\n","    adj_val = list_adj[num_train:num_train + num_val]\n","    logP_val = list_logP[num_train:num_train + num_val]\n","    feature_test = list_feature[num_total - num_test:]\n","    adj_test = list_adj[num_total - num_test:]\n","    logP_test = list_logP[num_total - num_test:]\n","        \n","    train_set = GCNDataset(feature_train, adj_train, logP_train)\n","    val_set = GCNDataset(feature_val, adj_val, logP_val)\n","    test_set = GCNDataset(feature_test, adj_test, logP_test)\n","\n","    partition = {\n","        'train': train_set,\n","        'val': val_set,\n","        'test': test_set\n","    }\n","\n","    return partition"],"metadata":{"id":"oNTuiIVyJ2wt","executionInfo":{"status":"ok","timestamp":1647414054898,"user_tz":-540,"elapsed":415,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["partition = partition(list_feature, list_adj, list_logP)"],"metadata":{"id":"1_OasSeMLoUT","executionInfo":{"status":"ok","timestamp":1647414058548,"user_tz":-540,"elapsed":2,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["print(\"list_smi:\", type(list_smi), np.shape(list_smi))\n","print(\"partition:\", type(partition), np.shape(partition))\n","print(\"list_feature:\", type(list_feature), np.shape(list_feature)) # 10000개의 데이터셋, 최대원자갯수 50, atom_feature 수 = input1\n","print(\"list_adj:\", type(list_adj), np.shape(list_adj)) # 10000개의 데이터셋, 최대원자갯수50, 그에 따른 최대 연결 갯수? = input2\n","print(\"list_logP:\", type(list_logP), np.shape(list_logP))\n","print(\"train:\", type(partition['train']), np.shape(partition['train']))\n","print(\"val:\", type(partition['val']), np.shape(partition['val']))\n","print(\"test:\", type(partition['test']), np.shape(partition['test']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5V8c3EldAggv","executionInfo":{"status":"ok","timestamp":1647414060166,"user_tz":-540,"elapsed":3,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}},"outputId":"8a95deb1-9b5b-48b3-ce68-c2d6f8ac77db"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["list_smi: <class 'list'> (10000,)\n","partition: <class 'dict'> ()\n","list_feature: <class 'numpy.ndarray'> (10000, 50, 58)\n","list_adj: <class 'list'> (10000, 50, 50)\n","list_logP: <class 'numpy.ndarray'> (10000,)\n","train: <class '__main__.GCNDataset'> (6000, 3)\n","val: <class '__main__.GCNDataset'> (2000, 3)\n","test: <class '__main__.GCNDataset'> (2000, 3)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:1970: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  result = asarray(a).shape\n"]}]},{"cell_type":"code","source":["class GCNLayer(nn.Module):\n","    \n","    def __init__(self, in_dim, out_dim, n_atom, act=None, bn=False): # feature, filter\n","        super(GCNLayer, self).__init__()\n","        \n","        self.use_bn = bn\n","        self.linear = nn.Linear(in_dim, out_dim) # batch, ad, fe\n","        nn.init.xavier_uniform_(self.linear.weight)\n","        self.bn = nn.BatchNorm1d(n_atom)\n","        self.activation = act\n","        \n","    def forward(self, x, adj):\n","        out = self.linear(x) #HW + b\n","        out = torch.matmul(adj, out)\n","        if self.use_bn:\n","            out = self.bn(out)\n","        if self.activation != None:\n","            out = self.activation(out)\n","        return out, adj"],"metadata":{"id":"deISNRi-OigV","executionInfo":{"status":"ok","timestamp":1647414065597,"user_tz":-540,"elapsed":417,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["class Predictor(nn.Module):\n","    \n","    def __init__(self, in_dim, out_dim, act=None):\n","        super(Predictor, self).__init__()\n","        \n","        self.in_dim = in_dim\n","        self.out_dim = out_dim\n","        \n","        self.linear = nn.Linear(self.in_dim,\n","                                self.out_dim)\n","        nn.init.xavier_uniform_(self.linear.weight)\n","        self.activation = act\n","        \n","    def forward(self, x):\n","        out = self.linear(x)\n","        if self.activation != None:\n","            out = self.activation(out)\n","        return out"],"metadata":{"id":"uFFeQdxEV0XN","executionInfo":{"status":"ok","timestamp":1647414067179,"user_tz":-540,"elapsed":5,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["class ReadOut(nn.Module):\n","    \n","    def __init__(self, in_dim, out_dim, act=None):\n","        super(ReadOut, self).__init__()\n","        \n","        self.in_dim = in_dim\n","        self.out_dim= out_dim\n","        \n","        self.linear = nn.Linear(self.in_dim, \n","                                self.out_dim)\n","        nn.init.xavier_uniform_(self.linear.weight)\n","        self.activation = act\n","\n","    def forward(self, x):\n","        out = self.linear(x)\n","        out = torch.sum(out, 1)\n","        if self.activation != None:\n","            out = self.activation(out)\n","        return out"],"metadata":{"id":"j1xlmMnyXuWB","executionInfo":{"status":"ok","timestamp":1647414068950,"user_tz":-540,"elapsed":2,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["class GCNNet(nn.Module):\n","    \n","    def __init__(self):\n","        super(GCNNet, self).__init__()\n","        out_dim2 = 256\n","        hidden_dim = out_dim2\n","        pred_dim1 = 128\n","        pred_dim2 = 64\n","        pred_dim3 = 32\n","        pred_dim4 = 16\n","\n","        self.gcn_layer1 = GCNLayer(in_dim = 58, out_dim = 116, n_atom = 50, bn=True)\n","        self.gcn_layer2 = GCNLayer(in_dim = 116, out_dim = out_dim2, n_atom = 50, bn=True)\n","\n","        self.relu = nn.ReLU()\n","\n","        self.readout = ReadOut(hidden_dim, \n","                               pred_dim1,\n","                               act=nn.ReLU())\n","        self.pred1 = Predictor(pred_dim1,\n","                               pred_dim2,\n","                               act=nn.ReLU())\n","        self.pred2 = Predictor(pred_dim2,\n","                               pred_dim3,\n","                               act=nn.ReLU())\n","        self.pred3 = Predictor(pred_dim3,\n","                               pred_dim4,\n","                               act=nn.ReLU())\n","        self.pred4 = Predictor(pred_dim4,\n","                               1)\n","        \n","    def forward(self, x, adj):\n","        out, adj = self.gcn_layer1(x,adj)\n","        out = self.relu(out)\n","        out, adj = self.gcn_layer2(out, adj)\n","        out = self.relu(out)\n","        out = self.readout(out)\n","        out = self.pred1(out)\n","        out = self.pred2(out)\n","        out = self.pred3(out)\n","        out = self.pred4(out)\n","        return out"],"metadata":{"id":"YtSGQ_xNSgQ-","executionInfo":{"status":"ok","timestamp":1647414425409,"user_tz":-540,"elapsed":2,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["def train(net, partition, optimizer, criterion):\n","    train_batch_size = 100\n","    trainloader = torch.utils.data.DataLoader(partition['train'], \n","                                              batch_size=train_batch_size, \n","                                              shuffle=True, num_workers=2)\n","    net.train()\n","\n","    train_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        optimizer.zero_grad() # [21.01.05 오류 수정] 매 Epoch 마다 .zero_grad()가 실행되는 것을 매 iteration 마다 실행되도록 수정했습니다. \n","\n","        # get the inputs\n","        list_feature, list_adj, list_logP = data\n","\n","        list_feature = list_feature.float()\n","        list_adj = list_adj.float()\n","        list_logP = list_logP.float().view(-1, 1)\n","        outputs = net(list_feature, list_adj)\n","\n","        loss = criterion(outputs, list_logP)\n","        train_loss += loss.item()\n","        loss.backward()\n","        optimizer.step()\n","\n","    train_loss = train_loss / len(trainloader)\n","    return train_loss"],"metadata":{"id":"sfBBXSlIoyta","executionInfo":{"status":"ok","timestamp":1647414435889,"user_tz":-540,"elapsed":481,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["def validate(net, partition, criterion):\n","    val_batch_size = 100\n","    validloader = torch.utils.data.DataLoader(partition['val'], \n","                                              batch_size=val_batch_size, \n","                                              shuffle=False, num_workers=2)\n","\n","    net.eval()\n","\n","    val_loss = 0.0\n","    with torch.no_grad():\n","        for data in validloader:\n","            list_feature, list_adj, list_logP = data\n","\n","            list_feature = list_feature.float()\n","            list_adj = list_adj.float()\n","            list_logP = list_logP.float().view(-1, 1)\n","            outputs = net(list_feature, list_adj)\n","\n","            loss = criterion(outputs, list_logP)\n","            val_loss += loss.item()\n","\n","        val_loss = val_loss / len(validloader)\n","    return val_loss"],"metadata":{"id":"6yiV9LdEWmPF","executionInfo":{"status":"ok","timestamp":1647414437061,"user_tz":-540,"elapsed":2,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["def test(net, partition):\n","    test_batch_size = 100\n","    testloader = torch.utils.data.DataLoader(partition['test'], \n","                                             batch_size=test_batch_size, \n","                                             shuffle=False, num_workers=2)\n","    net.eval()\n","    with torch.no_grad():\n","        logP_total = list()\n","        pred_logP_total = list()\n","        for data in testloader:\n","            list_feature, list_adj, list_logP = data\n","            list_feature = list_feature.float()\n","            list_adj = list_adj.float()\n","            list_logP = list_logP.float()\n","            logP_total += list_logP.tolist()\n","            list_logP = list_logP.view(-1, 1)\n","            \n","            outputs = net(list_feature, list_adj)\n","            pred_logP_total += outputs.view(-1).tolist()\n","\n","        mae = mean_absolute_error(logP_total, pred_logP_total)\n","        std = np.std(np.array(logP_total)-np.array(pred_logP_total))\n","    \n","    return logP_total, pred_logP_total"],"metadata":{"id":"3P8kNBLShlc1","executionInfo":{"status":"ok","timestamp":1647414992582,"user_tz":-540,"elapsed":684,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":88,"outputs":[]},{"cell_type":"code","source":["net = GCNNet()\n","optimizer = optim.Adam(net.parameters(), lr=0.001, weight_decay = 0.00001)\n","criterion = nn.MSELoss()"],"metadata":{"id":"1_2z6W_tFCgT","executionInfo":{"status":"ok","timestamp":1647415644906,"user_tz":-540,"elapsed":588,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}}},"execution_count":105,"outputs":[]},{"cell_type":"code","source":["e = 100\n","train_losses = []\n","val_losses = []\n","for epoch in range(e):\n","    ts = time.time()\n","    train_loss = train(net=net, partition=partition, optimizer=optimizer, criterion=criterion)\n","    val_loss = validate(net=net, partition=partition, criterion=criterion)\n","    te = time.time()\n","    train_losses.append(train_loss)\n","    val_losses.append(val_loss)\n","    print(\"Epoch : {}, Loss(train/val) : {:.4f}/{:.4f}, Time : {:.2f}\".format(epoch, train_loss, val_loss, te - ts))\n","logP_total, pred_logP_total = test(net, partition)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e3QL7mnEFiXT","executionInfo":{"status":"ok","timestamp":1647416317500,"user_tz":-540,"elapsed":671251,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}},"outputId":"e0cad46f-9f8d-4b20-c47c-fad243dfe923"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch : 0, Loss(train/val) : 2.6768/1.3441, Time : 6.00\n","Epoch : 1, Loss(train/val) : 0.7276/0.4526, Time : 5.87\n","Epoch : 2, Loss(train/val) : 0.3267/1.9267, Time : 5.80\n","Epoch : 3, Loss(train/val) : 0.2523/0.3290, Time : 5.69\n","Epoch : 4, Loss(train/val) : 0.1832/0.1709, Time : 5.63\n","Epoch : 5, Loss(train/val) : 0.1267/0.1818, Time : 6.16\n","Epoch : 6, Loss(train/val) : 0.1225/0.1150, Time : 5.72\n","Epoch : 7, Loss(train/val) : 0.1062/0.1174, Time : 5.70\n","Epoch : 8, Loss(train/val) : 0.0902/0.1359, Time : 5.66\n","Epoch : 9, Loss(train/val) : 0.0860/0.1062, Time : 5.65\n","Epoch : 10, Loss(train/val) : 0.0778/0.1238, Time : 5.60\n","Epoch : 11, Loss(train/val) : 0.0921/0.3026, Time : 5.66\n","Epoch : 12, Loss(train/val) : 0.0873/0.0837, Time : 5.66\n","Epoch : 13, Loss(train/val) : 0.0737/0.0894, Time : 5.63\n","Epoch : 14, Loss(train/val) : 0.0719/0.0920, Time : 5.69\n","Epoch : 15, Loss(train/val) : 0.0622/0.0718, Time : 5.66\n","Epoch : 16, Loss(train/val) : 0.0928/0.1186, Time : 5.67\n","Epoch : 17, Loss(train/val) : 0.0639/0.1203, Time : 5.65\n","Epoch : 18, Loss(train/val) : 0.0741/0.0872, Time : 6.14\n","Epoch : 19, Loss(train/val) : 0.0589/0.0578, Time : 5.67\n","Epoch : 20, Loss(train/val) : 0.0476/0.1917, Time : 5.69\n","Epoch : 21, Loss(train/val) : 0.0573/0.1202, Time : 6.11\n","Epoch : 22, Loss(train/val) : 0.0608/0.0594, Time : 5.76\n","Epoch : 23, Loss(train/val) : 0.0499/0.0576, Time : 6.20\n","Epoch : 24, Loss(train/val) : 0.0432/0.0530, Time : 5.75\n","Epoch : 25, Loss(train/val) : 0.0519/0.0607, Time : 5.70\n","Epoch : 26, Loss(train/val) : 0.0466/0.0782, Time : 6.22\n","Epoch : 27, Loss(train/val) : 0.0462/0.0504, Time : 5.84\n","Epoch : 28, Loss(train/val) : 0.0450/0.0684, Time : 5.81\n","Epoch : 29, Loss(train/val) : 0.0355/0.0749, Time : 5.88\n","Epoch : 30, Loss(train/val) : 0.0452/0.0614, Time : 5.93\n","Epoch : 31, Loss(train/val) : 0.0485/0.0438, Time : 6.07\n","Epoch : 32, Loss(train/val) : 0.0436/0.0433, Time : 6.21\n","Epoch : 33, Loss(train/val) : 0.0457/0.0433, Time : 6.29\n","Epoch : 34, Loss(train/val) : 0.0371/0.0520, Time : 6.45\n","Epoch : 35, Loss(train/val) : 0.0448/0.0909, Time : 6.55\n","Epoch : 36, Loss(train/val) : 0.0431/0.0583, Time : 6.70\n","Epoch : 37, Loss(train/val) : 0.0401/0.0492, Time : 6.80\n","Epoch : 38, Loss(train/val) : 0.0407/0.0416, Time : 6.85\n","Epoch : 39, Loss(train/val) : 0.0355/0.0418, Time : 6.90\n","Epoch : 40, Loss(train/val) : 0.0311/0.0355, Time : 6.72\n","Epoch : 41, Loss(train/val) : 0.0407/0.1316, Time : 6.74\n","Epoch : 42, Loss(train/val) : 0.0329/0.0641, Time : 6.69\n","Epoch : 43, Loss(train/val) : 0.0318/0.0351, Time : 6.74\n","Epoch : 44, Loss(train/val) : 0.0352/0.0535, Time : 6.81\n","Epoch : 45, Loss(train/val) : 0.0419/0.0374, Time : 6.86\n","Epoch : 46, Loss(train/val) : 0.0271/0.0342, Time : 6.97\n","Epoch : 47, Loss(train/val) : 0.0318/0.0342, Time : 7.01\n","Epoch : 48, Loss(train/val) : 0.0277/0.0320, Time : 7.02\n","Epoch : 49, Loss(train/val) : 0.0245/0.0334, Time : 6.99\n","Epoch : 50, Loss(train/val) : 0.0263/0.0906, Time : 7.08\n","Epoch : 51, Loss(train/val) : 0.0523/0.0402, Time : 7.09\n","Epoch : 52, Loss(train/val) : 0.0441/0.0775, Time : 7.14\n","Epoch : 53, Loss(train/val) : 0.0351/0.0380, Time : 7.15\n","Epoch : 54, Loss(train/val) : 0.0324/0.0318, Time : 7.08\n","Epoch : 55, Loss(train/val) : 0.0279/0.0440, Time : 6.86\n","Epoch : 56, Loss(train/val) : 0.0275/0.0356, Time : 6.87\n","Epoch : 57, Loss(train/val) : 0.0242/0.0312, Time : 6.89\n","Epoch : 58, Loss(train/val) : 0.0308/0.0411, Time : 6.92\n","Epoch : 59, Loss(train/val) : 0.0376/0.0506, Time : 6.91\n","Epoch : 60, Loss(train/val) : 0.0386/0.0318, Time : 6.84\n","Epoch : 61, Loss(train/val) : 0.0334/0.0330, Time : 6.87\n","Epoch : 62, Loss(train/val) : 0.0313/0.0409, Time : 6.88\n","Epoch : 63, Loss(train/val) : 0.0231/0.0301, Time : 6.91\n","Epoch : 64, Loss(train/val) : 0.0230/0.0299, Time : 6.89\n","Epoch : 65, Loss(train/val) : 0.0236/0.0597, Time : 6.97\n","Epoch : 66, Loss(train/val) : 0.0279/0.0380, Time : 6.92\n","Epoch : 67, Loss(train/val) : 0.0251/0.0320, Time : 7.06\n","Epoch : 68, Loss(train/val) : 0.0199/0.0277, Time : 7.13\n","Epoch : 69, Loss(train/val) : 0.0255/0.0461, Time : 7.25\n","Epoch : 70, Loss(train/val) : 0.0288/0.0294, Time : 7.31\n","Epoch : 71, Loss(train/val) : 0.0266/0.0287, Time : 7.32\n","Epoch : 72, Loss(train/val) : 0.0298/0.0365, Time : 7.31\n","Epoch : 73, Loss(train/val) : 0.0224/0.0327, Time : 7.36\n","Epoch : 74, Loss(train/val) : 0.0192/0.0274, Time : 7.43\n","Epoch : 75, Loss(train/val) : 0.0186/0.0517, Time : 7.41\n","Epoch : 76, Loss(train/val) : 0.0213/0.0356, Time : 7.42\n","Epoch : 77, Loss(train/val) : 0.0219/0.0273, Time : 7.49\n","Epoch : 78, Loss(train/val) : 0.0213/0.0331, Time : 7.32\n","Epoch : 79, Loss(train/val) : 0.0191/0.0313, Time : 7.36\n","Epoch : 80, Loss(train/val) : 0.0227/0.0348, Time : 7.42\n","Epoch : 81, Loss(train/val) : 0.0265/0.0483, Time : 7.43\n","Epoch : 82, Loss(train/val) : 0.0193/0.0284, Time : 7.45\n","Epoch : 83, Loss(train/val) : 0.0234/0.0320, Time : 7.53\n","Epoch : 84, Loss(train/val) : 0.0345/0.0472, Time : 7.53\n","Epoch : 85, Loss(train/val) : 0.0238/0.0283, Time : 7.62\n","Epoch : 86, Loss(train/val) : 0.0210/0.0266, Time : 7.61\n","Epoch : 87, Loss(train/val) : 0.0231/0.0406, Time : 7.63\n","Epoch : 88, Loss(train/val) : 0.0227/0.0352, Time : 7.43\n","Epoch : 89, Loss(train/val) : 0.0187/0.0278, Time : 7.27\n","Epoch : 90, Loss(train/val) : 0.0198/0.0313, Time : 7.35\n","Epoch : 91, Loss(train/val) : 0.0254/0.0285, Time : 7.46\n","Epoch : 92, Loss(train/val) : 0.0230/0.0405, Time : 7.43\n","Epoch : 93, Loss(train/val) : 0.0181/0.0343, Time : 7.42\n","Epoch : 94, Loss(train/val) : 0.0190/0.0265, Time : 7.44\n","Epoch : 95, Loss(train/val) : 0.0139/0.0254, Time : 7.45\n","Epoch : 96, Loss(train/val) : 0.0157/0.0294, Time : 7.44\n","Epoch : 97, Loss(train/val) : 0.0180/0.0562, Time : 7.47\n","Epoch : 98, Loss(train/val) : 0.0162/0.0494, Time : 7.52\n","Epoch : 99, Loss(train/val) : 0.0190/0.0512, Time : 7.50\n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","logP_total = np.array(logP_total)\n","pred_logP_total = np.array(pred_logP_total)\n","model = LinearRegression()\n","model.fit(logP_total.reshape(-1,1), pred_logP_total.reshape(-1,1))\n","R2_score = model.score(logP_total.reshape(-1,1), pred_logP_total.reshape(-1,1))\n","coefficient = float(model.coef_)\n","intercept = float(model.intercept_)\n","print(\" R2_score : {0} \\n Coefficient : {1} \\n Intercept : {2}\".format(R2_score, coefficient, intercept))\n","X = np.linspace(min(logP_total),max(logP_total),100)\n","Y = coefficient * X + intercept"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"euYc77yUmV2t","executionInfo":{"status":"ok","timestamp":1647416318888,"user_tz":-540,"elapsed":5,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}},"outputId":"b2474da5-6d79-498a-c360-158bb94efaf0"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":[" R2_score : 0.9828063284817865 \n"," Coefficient : 0.9613093007152747 \n"," Intercept : 0.19004822434883606\n"]}]},{"cell_type":"code","source":["list_epoch = list(range(e))\n","fig = plt.figure(figsize=(16,8))\n","ax1 = fig.add_subplot(1,2,1)\n","ax1.plot(list_epoch, train_losses, label = 'train_loss')\n","ax1.plot(list_epoch, val_losses, label = 'val_loss')\n","ax1.set_xlabel('epoch')\n","ax1.set_ylabel('loss')\n","ax1.grid()\n","ax1.legend()\n","ax1.set_title('epoch vs loss')\n","\n","ax2 = fig.add_subplot(1,2,2)\n","ax2.scatter(logP_total, pred_logP_total, alpha = 0.2, s = 20, c = 'b')\n","plt.plot(X, Y, 'c', linewidth=1 ,label=\" R2_score : {0} \\n Coefficient : {1} \\n Intercept : {2}\".format(R2_score, coefficient, intercept))\n","ax2.set_xlabel('true')\n","ax2.set_ylabel('predict')\n","ax2.grid()\n","ax2.legend()\n","ax2.set_title('true vs predict')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":456},"id":"_BLkFHCHjwi7","executionInfo":{"status":"ok","timestamp":1647416319757,"user_tz":-540,"elapsed":871,"user":{"displayName":"김성문","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10597252919099900661"}},"outputId":"299991df-0a15-4f8f-c5ae-92f81e4b101f"},"execution_count":108,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x576 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}